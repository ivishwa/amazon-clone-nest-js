version: '3.9'
services:
  api:
    image: amazon-clone-api:1.0.0
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:debug
    ports:
      - 3000:3000
      - 9229:9229
    networks:
      - amazon-clone-network
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      - mongo
    environment:
      - CONFIG_MONGODB_PORT=27017
      - CONFIG_MONGODB_SERVER=mongo
  mongo-admin:
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=mongodb
      - ME_CONFIG_MONGODB_ADMINPASSWORD=mongodb
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      - mongo
    ports:
      - 8081:8081
    networks:
      - amazon-clone-network
    restart: unless-stopped
  mongo:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongodb
      - MONGO_INITDB_ROOT_PASSWORD=mongodb
    volumes:
      # seeding scripts
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
      # named volumes
      - mongodb:/data/db
      - mongoconfig:/data/configdb
    networks:
      - amazon-clone-network
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
volumes:
  # default dir on Ubuntu: /var/lib/docker/volumes
  mongodb:
  mongoconfig:


networks:
  amazon-clone-network:


